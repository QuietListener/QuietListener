---
layout: post
title: DDIA记录
date: 2023-03-08 14:32:00
categories:  开发
---

# 第一章
## 应用类型：数
据密集型(data-intensive)和计算密集型(compute-intensive).cpu的处理能力不是第一限制性因数，关键在于**数据量，数据的复杂度，以及数据的快速多变性**。

许多应用都包括：
1. 数据库()：数据存储
2. 高速缓存(Redis)：存储复杂或者操作代价昂贵的结果，加速下一次访问。
3. 索引(Es)：以关键字来搜索并支持各种过滤。
4. 流失处理(kafka,roketmq):持续发送消息到另一个进程，异步处理
5. 批处理(spark，flink)：定期处理大量的累计数据。
   
架构师要考虑的问题：
在构建某个特定的应用时，我们需要弄清楚哪些组件，哪些方法最适合自己，当某个组件不满足需求而必须组合使用的时候，要做到对各个组件的优缺点心中有数。

## 系统核心设计目标：
1. 可靠性 
    出现软硬件故障，人为失误等，系统可以继续运转，保证核心功能正确。
2. 可扩展性
   随着数据量，流量或者**复杂性**增长,系统能以合理的方式来匹配这些增长
3. 可维护性的数据系统
    新人加入来维护现有系统，和适配新的场景，系统能高效运转。

## 设计系统容易碰到的核心问题举例
1. 系统局部失效如何保证数据的正确性和完整性
2. 发生降级(degrade)时候，如何为客户提供一致良好的表现。
3. 负载增加时候，如何扩展
4. 如何设计友好的服务API
   

## 三大设计指标 详细
### 可靠性
#### 1. 什么叫可靠(举例对系统的期望)？
   1. 能执行用户期望的功能。
   2.  可以容忍出现错误或者不正确的软件使用方法。
   3.  性能能应对典型的场景，合理的负载压力和数据量
   4.  可以防止所有未经授权的访问和滥用。
总而言之，就是“即使发生了某些错误，系统任可以继续正常工作”

**如何在不可靠的单个组件上构建可靠的系统服务** 让系统有容错的能力(fault-tolorance)
测试的时候可以“故意搞出以外”，来测试系统的容错能力，比如Netflix的Chaos Monkey系统。

#### 故障类型1 硬件故障
如果有很多磁盘的存储集群，每天都有硬盘故障。可以使用“软件容错”的方式来容忍多机失效，成为硬件失效的补充，比如 hadoop的多副本。

#### 故障类型2 软件故障
##### 举例
1. 由于软件错误，特定输入导致服务崩溃。
2. 应用进程使用共享的cpu，磁盘，贷款等，但是失空跑飞了。
3. 系统依赖某些服务，该服务变慢或者异常。
4. 系统某个组件的小故障触发另一个组件的故障，引发更多系统问题。雪崩

#### 故障类型3 人为失误
人为失误包括 运维(开发)人员的配置出错。系统使用者的操作失误。
认识不可靠的，下面的方法可以保证系统的可靠性。
1. 尽量以最小出错的方式来设计系统。设计好抽象层，api和管理界面。做正确的事情很轻松，做错误的事很复杂。
2. 如果能提前分离出容易出错的地方，容易出现故障的接口、使用功能齐全的沙箱环境，让人们可以放心尝试，体验。
3. 充分测试：单元测试，全链路集成测试，手动测试，自动化测试。
4. 出现人为失误时候，提供快速恢复机制减小影响。快速回滚配置，滚动发布新代码，提供数据校验工具。
5. 监控子系统，错误率和性能指标监控。检查系统约束条件(bcp系统)
6. 管理流程和培训要跟上。(从人入手)