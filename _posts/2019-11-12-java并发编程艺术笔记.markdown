---
layout: post
title: java并发编程艺术笔记
date: 2019-10-29 14:32:00
categories:  java review
---

# 1. 并发编程的挑战
## 1. 并发编程会遇到的挑战
死锁，上下文切换频繁
## 2.挑战1: 上下文切换
>可以看看这篇文章 https://www.linuxblogs.cn/articles/18120200.html

### 1. 什么是上下文切换
1.cpu是分时处理的，会给每个线程分配一个时间片，当这个时间片用完后会，会保存状态，然后切换到下一个任务。下一次切会某个任务时候，需要恢复保存的状态。 这就是上下文切换。，上下文切换需要保存状态(寄存器，缓存等) 所以会影响效率。

### linux 查看上下文切换
>#每秒打印一下当前状态
>vmstat -w 1     


```shell
[www@iZbp15pf7sr2cgwbyqi1inZ ~]$ vmstat -w 1
procs -------------------memory------------------ ---swap-- -----io---- --system-- -----cpu-------
 r  b       swpd       free       buff      cache   si   so    bi    bo   in   cs  us sy  id wa st
 0  0          0     149856     146620     914276    0    0     1    14    1    1   1  0  99  0  0
 0  0          0     149684     146620     914276    0    0     0     8 1082 2211   1  0  99  0  0
 1  0          0     149716     146620     914276    0    0     0     8 1113 2253   1  1  98  0  0
 0  0          0     149716     146620     914276    0    0     0     8 1093 2249   1  1  98  0  0

```

1. cs:上下文切换次数
2. r:就绪队列的长度
3. us和sy:用户cpu时间和系统cpu时间使用率
4. in:(interupt)中断次数

**cs一般几百到1万都是正常的**  
**r值如果大于cpu核数就可能有大量争抢cpu出现。**


### 1. 怎么解决上下文切换
1. 减少锁的使用，将数据分段，不同线程处理不同段。
2. CAS(comapre and swap),不用加锁(其实是乐观锁)
3. 减少线程的创建，比如任务少，线程多，很多线程会处于等待状态，从等待到running就会有一次上线文切换。
4. 协程: 协程可以在单线程里实现任务调度和切换

#### 1. **查看java线程状态**
```shell
[www@bcz-app-study-record-consumer-1 ~]$ jstack -l 16015 | grep java.lang.Thread.State | awk '{print $2$3$4$5}' | sort | uniq -c 
     36 RUNNABLE
      1 TIMED_WAITING(onobjectmonitor)
     18 TIMED_WAITING(parking)
      3 TIMED_WAITING(sleeping)
      2 WAITING(onobjectmonitor)
     28 WAITING(parking)
```

#### 2. java线程的状态
1. NEW 线程创建了但是还没有启动
2. RUNNABLE:正在运行的任务，也可能在等待状态，比如等待IO
3. BLOCK:阻塞状态，线程要进入一个临界区，但是没有获德锁
4. WATING: 执行了不带世家参数的 wait, join，或者 LockSupport.park方法
5. TIMED_WATING: 执行了带时间参数的 wait ,join，或者 LockSupport.parkNanos/LockSupport.parkUntil
6. TERMINATED: 终止状态


## 挑战2：死锁
### 解决死锁的办法
1. 使用定时锁(本质是被动超时的机制)
2. 主动检查,等待图(wait-for graph)中有环就有死锁，然后强制释放某一个线程获取的资源。mysql使用的方法
3. 加锁的顺序必须一致。
4. 避免一个线程同时获取多个锁。



# 2. java并发机制的底层原理
## 1. 可见性
**可见性指的是当一个线程修改一个共享变量的时候，另一个线程能读到这个修改值。**
synchronized 和 volatile都可以保证变量的可见性。
## 2. volatile
>  volatile [ˈvɒlətaɪl] adj.易变的;无定性的;无常性的;可能急剧波动的;不稳定的;易恶化的;易挥发的;易发散的

如果一个变量被声明为volatile java内存模型(JMM)保证所有线程看到这个变量的值是一致的。

#### 1. volatile 修饰的变量有什么不同
volatile修饰的变量有两个特殊处理:
1. 将这个变量在缓存中的副本写回到系统内存。
2. 让其他cpu的缓冲了改变量失效(必须去系统内存中去取，不能从缓存中去取) 这个由**cpu的缓冲一致性协议**来保证。

## 3. synchronized
java每一个对象都可以是锁。
1. 普通同方法 锁是当前的实例对象
2. 静态同步方法，锁是当前类的class对象
3. 同步方法块，所以synchronized括号里的对象。

#### 1. 实现原理
##### 1. 同步块
对于同步块是在同步块开始插入monitorenter指令，在同步块结束插入monitorexit指令。
例如
```java
 public void increase() {
        synchronized (this) {
            i++;
        }
    }
```

下面是字节码
```java
public void increase();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
        stack=3, locals=3, args_size=1
            0: aload_0
            1: dup
            2: astore_1
            3: monitorenter // 进入同步方法
            4: aload_0
            5: dup
            6: getfield #2  // Field i:I // i++ start
            9: iconst_1
            10: iadd
            11: putfield #2 // Field i:I // i++ end 总共有4个指令，说明++操作不具有原子性
            14: aload_1
            15: monitorexit // 正常退出同步方法
            16: goto 24
            19: astore_2
            20: aload_1
            21: monitorexit // 异常退出同步方法
            22: aload_2
            23: athrow
            24: return
        Exception table:
            from    to  target type
               4    16    19   any # 进入异常处理流程，第2个monitorexit保证在出现异常时，monitorenter与monitorexit成对出现
              19    22    19   any
```

##### 2.同步方法  
对于**同步方法**是检查方法有没有**ACC_SYNCHRONIZED**标志，来判断要不要去竞争锁

```java
public synchronized void increase() {
        i++;
    }
```

**字节码**

```java
public synchronized void increase();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED // ACC_SYNCHRONIZED指明为同步方法
    Code:
        stack=3, locals=1, args_size=1
            0: aload_0
            1: dup
            2: getfield #2  // Field i:I
            5: iconst_1
            6: iadd
            7: putfield #2  // Field i:I
            10: return
```


#### 1. 重量级锁 MonitorObject
每一个java对象都可以作为锁。具体实现是每一个对象都有一个关联的MonitorObject，MonitorObject使用C++实现,有下面一些属性
1. ower:拥有该monitor的线程
2. entrySet：当一个线程需要获取 Object 的锁时，会被放入 EntrySet 中进行等待 线程处于BLOCKED 状态
3. waitSet: 调用 wait 方法将锁释放，进入 wait set 中阻塞进行等待，其它线程在这个时候有机会获得锁 处于WAITTING状态
4. 重入计数器: 重入次数


### 1. synchronized锁优化
#### 1. 原理:MarkWord
每一个对象的对象头都由2部分组成，**第一部分**存放自生对象运行时数据: hashcode,GC分代年龄等，这一部分叫做**Mark Word**。**第二部分**存储指向方法区对象类型数据的指针。
MarkWord就跟锁优化息息相关

**MarkWord 只有64(或者32)字节，在不同的状态下代表不同的语义(为了节约存储空间)。**

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/20200701-markword.png)

ObjectMonitor是**悲观锁**，需要操作系统的支持，非常耗资源。 java 1.6以后使用**偏向锁**和**轻量级**锁对synchronized进行锁优化， **偏向锁**和**轻量级**是**乐观锁**,使用CAS原子操作实现，在某些情况下会有效率。

##### 0 自旋锁
1. 互斥同步对性能最大的影响是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给Java虚拟机的并发性能带来了很大的压力。
2. 共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得。
3. 物理机器有一个以上的处理器或者处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。
4. 可以使用XX：+UseSpinning参数来开启

周志明. 深入理解Java虚拟机：JVM高级特性与最佳实践（第3版） (华章原创精品) (Chinese Edition) (Kindle Location 9647). Kindle Edition. 

##### 1. 偏向锁
1. HotSpot作者 大多数时候锁并不存在多线程禁止，总是由同一个线程多次获得。在一个线程访问同步块的时候，会在对象头和栈帧中的锁记录中(Lock Record)存储**线程id**，以后同一个线程进入和退出同步块时候不需要cas操作来加锁解锁。直接看看对象头的MarkWord中时候存储着指向当前线程的偏向锁。如果成功就表示获得了锁。
如果 有另一个线程尝试获取这个锁，偏向锁马上宣告失败。撤销后回到无锁状态或者轻量级锁状态。
2. 参数XX：+UseBiasedLocking，

3. 问题偏向锁存了threadId后，hashcode存哪里呢?（仔细看看mark word的那张图）
   如果计算过hashcode的对象就不能使用偏向锁了。


##### 2. 轻量级锁

1. 在代码即将进入同步块的时候，如果此同步对象没有被锁定（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（LockRecord）的空间，用于存储锁对象目前的MarkWord的拷贝（官方为这份拷贝加了一个Displaced前缀，即DisplacedMarkWord）
2. 虚拟机将使用CAS操作尝试把对象的MarkWord更新为指向LockRecord的指针。如果这个更新动作成功了，即代表该线程拥有了这个对象的锁，并且对象MarkWord的锁标志位（MarkWord的最后两个比特）将转变为“00”，表示此对象处于轻量级锁定状态。
 
 3. 如果这个更新操作失败了，那就意味着至少存在一条线程与当前线程竞争获取该对象的锁。虚拟机首先会检查对象的MarkWord是否指向当前线程的栈帧，如果是，说明当前线程已经拥有了这个对象的锁，那直接进入同步块继续执行就可以了，否则就说明这个锁对象已经被其他线程抢占了。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁就不再有效，必须要膨胀为重量级锁，锁标志的状态值变为“10”，此时MarkWord中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也必须进入阻塞状态。

4. 解锁过程也同样是通过CAS操作来进行的，如果对象的MarkWord仍然指向线程的锁记录，那就用CAS操作把对象当前的MarkWord和线程中复制的DisplacedMarkWord替换回来。假如能够成功替换，那整个同步过程就顺利完成了；如果替换失败，则说明有其他线程尝试过获取该锁，就要在释放锁的同时，唤醒被挂起的线程。

https://xiaomi-info.github.io/2020/03/24/synchronized/  

https://tech.meituan.com/2018/11/15/java-lock.html

#### 2. 锁升级
使用synchronized时候，会优先使用偏向锁，如果有竞争出现会使用 轻量级锁，如果还有竞争再使用重量级锁。


## 1. CAS实现的原子操作的问题
### 1. ABA问题
ABA问题是 如果一个值原来是A，变成了B，又变成了A，那么CAS检查时候会认为没有变化，但是实际上是变化了的。 
**解决办法**：加入版本号。

### 2. CAS会自旋，消耗cpu资源
### 3. CAS只能一次处理一个变量。

# 3. java内存模型(JMM java memory model)
## 1. 理论上多线程“通信”的2个模型
### 1. 共享内存
共享内存模型里，线程间共享公共状态，通过对内存中公共状态的读写来进行通信。在对公共状态进行写的时候就需要同步，而且同步是显示的。
**java使用共享内存模型**

### 2. 消息传递模型
消息传递模型不需要同步，因为消息发送，天生就有先后顺序了。



## java内存模型 JMM
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/20200701-jmm.jpg)
1. 共享变量存放在主存中，每个线程有一个私有的本地内存(其实是缓存，写缓存，寄存器等)。
2. 线程的本地内存存放的是共享变量在主存中的副本，（相当于一个共享内存的缓存）
3. AB线程要通信的话，需要下面步骤:1. 线程A把本地内存贡献变量修改后刷新到主存，2. 线程B到主存去读取A更新过的共享变量。   
**上面就是线程A向线程B发送消息的过程**




### 1. 指令重排
#### 1.3种指令重排
java为了提高性能，会进行指令重排序，java从源代码到最终的执行指令序列，可能要经过3种指令重排序
1. 编译器优化重排序  编译器在不改变单线程程序语义的前提下，重新安排语句的执行顺序
2. 指令级并行重排序  处理器使用指令并行技术，如果没有数据依赖，可以改变语句对应机器指令的执行顺序
3. 内存系统重排序    处理器使用缓存来读/写缓冲区，这使得加载和存储操作看上去可能是乱序执行。

#### 2.怎么规避指令重排带来的问题
 对于1 编译器重排，java编译器会禁止特定类型的编译重排。对于2，3 JMM处理规则会要求编译器在生成指令序列时候，插入特定类型的**内存屏障**(Memory Barries)指令，**内存屏障**会禁止特定的处理器重排序

内存屏障有下面4类
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2020-07-10-memory-barrier.jpg)

#### 3. happen-before
java使用JSR-133内存模型,JSR-133使用happen-before概念来说明操作之间的**可见性**，**如果一个操作的结果需要对另一个操作可见**，那么这两个操作就必须要存在**happen-before**关系。这两个操作可以是一个单线程内的，也可以是两个线程之间的。

**为什么要有happen-before规则?**
一个happen-before规则对应一个或者多个编译器或者处理器重排规则，程序员只需要知道JMM提供的happen-before规则，不需要去理解复杂重排规则。

下面是与程序员相关的happen-before规则
1. 程序顺序规则:一个线程找那个的每个
2. 监视器锁规则： 一个锁的解锁，happen-before与随后对这个锁的加锁
3. volatile变量规则: 对一个volatile的写happen-before于任意后续对这个volatile域的读
4. 传递性： A happen-before B，B happen-before C 那么 A happen-before C.

#### 4. 数据依赖性
如果两个操作访问同一个变量，如果其中有一个为写操作，这两个操作之间就有依赖性。如果交换这两个操作的顺序，就会改变执行结果。 **这里的操作是指在单线程内的两个操作**。  **编译器和处理器在处理重排序时，会准守依赖性，不会改变有依赖关系的操作之间的顺序**


#### 5.java的 同步状态下的顺序一致性
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-7-11-syc-demo-1.jpg)

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2020-09-07-resort.jpg)

**锁能保证线程间的同步，但是在单线程的临界区时候可能会有重排序。但是临界区的重排不能“逸出”到临界区外**

### 2. volatile的内存语义
1. 可见性: 对一个volatile变量的写入，能立即让其他线程看见。 
2. 原子性: 对一个volatile变量的读写具有原子性，但是 i++不具有原子性。

原理：
线程A写一个volatile变量，实质上是线程A向要读取线程B**发送了一个消息**  
线程B读一个volatile变量，实质上是线程B接受线程A发出的消息  
上面两个过程就本质上是实现了 **进程间的通信**  



### 怎么实现volatile的语义
通过编译器禁止指令重拍来实现volatile的内存语义，具体就是插入**内存屏障**来实现。
jsr-133会禁止volatile变量和普通变量重排序

### 3. 锁的内存语义
 线程释放锁时，jmm会将线程对应的本地内存中的共享变量刷新到主存中(跟volatile的内存语义一样)。获得锁，进入临界区读到的共享变量都是**新鲜**的。
 
1. 线程A释放锁，实际是线程A向接下来要获取这个锁的某个线程B发出消息
2. 线程B获取一个锁，是指上是线程B收到了之前某个线程发出的消息
上面两个实际上是线程A向B发出了一个消息。


### 锁内存语义的实现
ReentrantLock分为公平锁和非公平锁
1. 公平锁和非公平锁最后都要写一个volatile变量state
2. 公平所获取是写限度volatile变量
3. 非公平锁，会用cas更新volatile变量，cas同事具有volatile读和volatile写的内存语义。

#### CAS为什么会有volatile的读和写的内存语义
如果 使用CAS，在编译成字节码的时候，会在指令cmpxchg钱前加一个Lock
intel对带有Lock前缀有如下描述:
1. 确保了**读-改-写**的原子性。lock会锁总线(或者锁住Cache),其他处理器无法访问内存。
2. 禁止该指令与前后的读和写指令重排序
3. 将缓冲中的所有数据刷新到内存。

#### concurrent包的实现
concurrent包就是建立在volatile和CAS上的。
例如 AQS 就是一个volatile变量state和一个队列(存放线程)组成，AQS本质上就是用CAS来各种操作state的一个库。

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-7-11-concurrent-structure.jpg)

### 3. final的内存语义

final域的重排规则
1. 写: 在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作不能重排序
   JMM也会禁止编译器将final域的写重排到构造函数以外。
   写final可以保证，在对象引用为任意线程可见之前，对象的final域已经被正确初始化了，普通域没有这个保证。


2. 读： 读一个包含final域的对象引用，与随后初次读这个final域，这两个操作不能重排序。

在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。如果该引用不为null，那么这个对象的final域一定被线程A初始化了。


final 为引用类型的规则
改构造函数内对一个final引用对象的成员域写入，与随后再构造函数外把这个构造对象引用赋值给另个引用变量 这两个操作不能重排序。


## 双重检查锁定 延迟初始化(单例模式)
### 问题
```java
public class DoubleCheckLoking {
    public static DoubleCheckLoking instance;

    public static DoubleCheckLoking getInstance() {
        if (instance == null) {
            synchronized (DoubleCheckLoking.class) {
                if (instance == null) {
                    instance = new DoubleCheckLoking();
                }
            }
        }

        return instance;
    }
}
```

这是一个典型的单例代码 但是由于指令重拍却有可能有问题

这是因为  **instance = new DoubleCheckLoking();** 可能会有指令重拍
这句话包含了三部

```java
 memory = allocate();// 1. 分配对象的内存空间
 createInstance(memory); // 2 初始化对象
 instance = memory; // 3 设置instance指向分配的内存。
```

上面的 2和3 可能会有指令重排序，在多线程的时候就会发生下面的情况
**对象还没有初始化 就被其他线程看到了**
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-09-11-double-check-locking.jpg)


### 解决办法
#### 1. 不让2和3 重排
```

public class DoubleCheckLoking {
    //volatile 禁止重排序
    public static volatile DoubleCheckLoking instance;

    public static DoubleCheckLoking getInstance() {
        if (instance == null) {
            synchronized (DoubleCheckLoking.class) {
                if (instance == null) {
                    instance = new DoubleCheckLoking();
                }
            }
        }
        return instance;
    }
}

```

2.  2和3可以重排，但是不对其他线程可见

在调用 getInstance1 时候会导致InstanceHolder类被初始化，多个线程去初始化同一个类或者接口的时候，jvm都会有**初始化锁**来进行同步。
```java
public class DoubleCheckLoking {
    
    public static DoubleCheckLoking getInstance1() {
        return InstanceHolder.instance;
    }
    private static class InstanceHolder{
        static DoubleCheckLoking instance = new DoubleCheckLoking();
    }
}

```





# java线程
### 1. 线程优先级
不能依赖优先级，有的平台上，会忽略对优先级 比如macos 和 ubuntu。
### 2. 线程的状态
上面已经讲过了
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2020-7-15-thread-states.jpg)


1. java将操作系统中的运行和就绪合并为运行状态。
2. 阻塞是线程进入synchronized保护的临界区时候的状态，但是在阻塞在juc里的Lock时候是”等待“状态，因为Lock使用的是LockSupport的相关方法


### 3. deamon线程
1. daemo是作为支持型线程，当java虚拟机中不存在非deamon线程时候，jvm会退出。
2. 虚拟机退出daemon线程时，线程中的finally快并不一定会执行。在使用daemon线程时候，不能用finally来执行清理逻辑。

### 4.线程的创建启动和终止
#### 1. 创建线程
```java
 private void init(ThreadGroup g, Runnable target, String name,
                      long stackSize, AccessControlContext acc,
                      boolean inheritThreadLocals) {
        if (name == null) {
            throw new NullPointerException("name cannot be null");
        }

        this.name = name;

        Thread parent = currentThread();
        SecurityManager security = System.getSecurityManager();
        if (g == null) {
            /* Determine if it's an applet or not */

            /* If there is a security manager, ask the security manager
               what to do. */
            if (security != null) {
                g = security.getThreadGroup();
            }

            /* If the security doesn't have a strong opinion of the matter
               use the parent thread group. */
            if (g == null) {
                g = parent.getThreadGroup();
            }
        }

        /* checkAccess regardless of whether or not threadgroup is
           explicitly passed in. */
        g.checkAccess();

        /*
         * Do we have the required permissions?
         */
        if (security != null) {
            if (isCCLOverridden(getClass())) {
                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
            }
        }

        g.addUnstarted();

        this.group = g;
        this.daemon = parent.isDaemon();
        this.priority = parent.getPriority();
        if (security == null || isCCLOverridden(parent.getClass()))
            this.contextClassLoader = parent.getContextClassLoader();
        else
            this.contextClassLoader = parent.contextClassLoader;
        this.inheritedAccessControlContext =
                acc != null ? acc : AccessController.getContext();
        this.target = target;
        setPriority(priority);
        if (inheritThreadLocals && parent.inheritableThreadLocals != null)
            this.inheritableThreadLocals =
                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
        /* Stash the specified stack size in case the VM cares */
        this.stackSize = stackSize;

        /* Set thread ID */
        tid = nextThreadID();
    }
```

看源码我们可以看到
一个新线程对象都是由parent线程来空间分配，child继承了parent的优先级，contextClassLoader以及可以继承的ThreadLocal，最后分配一个唯一的ID。 这样，一个能运行的线程对象就初始化好了，在堆内等待运行。

#### 2. 中断
##### 什么是中断
1. 中断好比其他线程对改线程打了一个招呼，其他线程通过调用该线程的interrupt方法对其进行中断操作。

##### 中断怎么工作
线程可以检查自生是否被中断来进行响应，线程通过isInterrupted来判断是否被中断，也可以调用静态的Thread.interrupted()对当前线程的中断标识位进行复位。

java api中很多声明抛出InterruptedException方法，这些方法在抛出InterruptException后会将中断标识位清除。然后抛出InterruptException,此时调用isInterruped()会返回false。

#### 3. 为什么不用suspend和resume和stop
suspend调用后，线程不会释放已经占有的资源(比如锁)，而是占着资源进入随眠状态。可能引发死锁。
stop在终结一个线程时候也不保证线程资源的蒸菜释放。

#### 4. 安全地终止线程
```java
  /**
     * 优雅地停止线程
     * interrupt和cannel都可以
     */
    public static class Runner1 implements Runnable{

        private long i = 0;
        private volatile  boolean on = true;

        @Override
        public void run() {
            while(on && !Thread.currentThread().isInterrupted()){
                i++;
            }

            System.out.println("count i="+i);
        }

        public void cannel(){
            this.on = false;
        }
    }
```

上面可以通过调用interrupt和cannel来终止线程，相比stop()这种武断地停止线程，有机会去清理资源。

#### 5. 线程间通信

##### 1. 共享变量(共享内存)   
使用 sychronized和volatile来实现

##### 2. 等待/通知机制   
1. 线程A调用对象O的wait方法，进入等待状态
2. 线程B调用了对象O的notifyAll方法
3. 线程A收到对象O的通知后，从对象O的wait方法返回，继续执行操作。

等待通知的经典范式

**等待方**
```java
sychronized(obj){

    while(条件不满足){
        obj.wait()
    }

    逻辑
}

```

**通知方**

```java
sychronized(obj){
    改变条件
    obj.notifyAll()
}

```




#### 6. 应用例子
##### 1. 等待超时的方法

需求是: 调用一个方法，等待一段时间，如果在给定时间内得到结果立即返回，反之超时返回默认结果。

也是应该用 下面的模式，只是稍作修改
```java
sychronized(obj){

    while(条件不满足){
        obj.wait()
    }

    逻辑
}

```


```java
public Object synchronized getResult(long mills) throw InterruptedException{

    long waitUntil = System.currentTimeMillis()+mills;
    long remaining = mills;

    Object result = queryResult();
    
    while(result == null && remaining > 0){
        wait(remaining);
        result = queryResult();
        remainning = waitUntil - System.currentTimeMillis();
    }

    return result;
}
```


#### 6. Thread.join()
线程A调用了 thread.join()的含义是：当前线程**A等待thread终止**后才从thread.jion()返回。
也提供了超时的方法Thread.join(long milis).

join的源码如下 也是上面的那种模式写的
```java
public final synchronized void join(long millis)  throws InterruptedException {
        long base = System.currentTimeMillis();
        long now = 0;

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (millis == 0) {
            while (isAlive()) {
                wait(0);
            }
        } else {
            while (isAlive()) {
                long delay = millis - now;
                if (delay <= 0) {
                    break;
                }
                wait(delay);
                now = System.currentTimeMillis() - base;
            }
        }
    }
```


#### 7.ThreadLocal使用
ThreadLocal是以线程为键，以任意对象为值的存储结构，这个值被附带在线程上。

下面是用ThreadLocal来进行记时的一个应用。
```java

import java.util.concurrent.TimeUnit;

public class ThreadLocalProfiler {
    private static final ThreadLocal<Long> TIME_THREADLOCAL = new ThreadLocal<>();

    public static final void begin() {
        TIME_THREADLOCAL.set(System.currentTimeMillis());
    }

    public static final long end() {
        return System.currentTimeMillis() - TIME_THREADLOCAL.get();
    }


    public static void main(String[] args) {

        for (int i = 1; i < 5; i++) {
            final int time = i;
            Thread t = new Thread() {

                @Override
                public void run() {
                    ThreadLocalProfiler.begin();
                    try {
                        TimeUnit.SECONDS.sleep(time);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    System.out.println("time=" + time + " time consume:" + ThreadLocalProfiler.end() + " ms");
                }
            };
            t.start();

            try {
                t.join();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
}

```

输出结果是:
```shell
time=1 time consume:1005 ms
time=2 time consume:2003 ms
time=3 time consume:3000 ms
time=4 time consume:4002 ms
```


##### 2. 等待/超时机制
在**等待/通知**机制中，会有一个线程通知等待线程，然后系统唤起等待线程。
**等待/超时**是等待一段时间后


# 锁
## 1. lock接口
与synchronized的区别
lock可以
1. 非阻塞获取锁
2. 能够被中断
3. 能超时获取
4. 坏处是：可能忘记释放


## AQS队列同步器

https://quietlistener.github.io/java/review/2019/10/29/java%E5%B9%B6%E5%8F%91(lock)-review.html




# 并发容器
## ConcurrentHashMap
### 1. why ConcurrentHashMap
在并发编程中使用HashMap可能导致程序死循环。而使用线程安全的HashTable效率又非常低下，基于以上两个原因，便有了ConcurrentHashMap.

### ConcurrentHashMap好在哪里?
1. 锁分段技术可有效提升并发访问率

2. HashTable容器在访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的**锁分段**技术。

### 3.  具体实现
1. ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。
2. Segment是一种可重入锁（ReentrantLock），在ConcurrentHashMap里扮演锁的角色；
3. HashEntry则用于存储键值对数据。
4. 一个ConcurrentHashMap里包含一个**Segment数组**。Segment的结构和HashMap类似，是一种数组和链表结构。一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素，每个Segment守护着一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得与它对应的Segment锁，如图62所

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/chashmap1.png)


### 4.细节

#### 1. 参数
1. ConcurrentHashMap初始化方法是通过initialCapacity、loadFactor和concurrencyLevel等几个参数来初始化
2. segments数组的长度ssize是通过concurrencyLevel计算得出的。
concurrencyLevel的最小的2的N次方值来作为segments数组的长度。假如concurrencyLevel等于14、15或16，ssize都会等于16，即容器里锁的个数也是16。

3. 定位到segment
ConcurrentHashMap会首先使用Wang/Jenkinshash的变种算法对元素的hashCode进行一次再散列。

## ConcurrentLinkedQueue
ConcurrentLinkedQueue是一个基于链接节点的**无界**线程安全队列，它采用先进先出的规则对节点进行排序，当我们添加一个元素的时候，它会添加到队列的尾部；当我们获取一个元素时，它会返回队列头部的元素。它采用了“waitfree”算法（即**CAS**算法）来实现，

## 阻塞队列 BlockingQueue
### what?
阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/blockingqueue1.png)

