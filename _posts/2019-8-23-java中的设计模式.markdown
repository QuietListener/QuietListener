---
layout: post
title:  java中的设计模式
date:   2019-8-23 14:32:00
categories:  java 设计模式
---

# 1. 单例(singleton)模式
## 例子:
Runtime.getRuntime()

# 2. 代理(proxy)模式
## 例子
1. spring aop

# 3. 命令(command)模式
## 例子
1. hystrix 

# 4. 装饰(decorator)模式
## 例子
1. java io库

# 5. 模板方法模式
## 例子
1. AQS 只需要实现 tryRequire() tryRelease()

# 6. 工厂(factory)模式
## 例子
1. Slf4j LoggerFactory
2. Spring中的 BeanFactory
3. Executors



# 7. 建造者(builder)模式
## 例子:
1. guava cache
2. GsonBuilder

# 8. 适配器(adapter)模式
https://www.ibm.com/developerworks/cn/java/j-lo-adapter-pattern/index.html

# 9. 门面(facade)模式
## 例子
1. slf4j = simple logger facade 4 java

# 10. 观察者(Observer)模式
##
1. jdk自带 java.util.observable



# 接口型模式
类的接口是类允许其他类对象访问的方法与字段集。接口通常代表一种承诺，即方法需要实现接口方法名表示的操作.

## Adapter 适配器模式
模式所涉及的角色有：
1. 目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
2. 源(Adapee)角色：现在需要适配的接口。
3. 适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。


```java
package andy.com.designpattern.type_interface.adapter;



/**
 * 类的适配器模式
 * 模式所涉及的角色有：
 * 1. 目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
 * 2. 源(Adapee)角色：现在需要适配的接口。
 * 3. 适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。
 */
public class AdaptorClassTest {


    /**
     * 现有的类
     */
    static class Adaptee {
        /**
         * 已经有的方法
         *
         * @return
         */
        public void existsMethod() {
            System.out.println("已有的方法");
        }
    }


    /**
     * 现在需要的接口
     */
    static interface Target {
        /**
         * 原adaptee有的方法
         */
        public void existsMethod();

        /**
         * 原adaptee没有的方法
         */
        public void newMethod();
    }

    /**
     * 适配器
     */
    static class Adapter extends Adaptee implements Target {

        @Override
        public void newMethod() {
            System.out.println("新的方法");
        }
    }


    public static void main(String[] args) {
        Target t = new Adapter();
        t.existsMethod();//调用老方法
        t.newMethod();//调用新方法
    }

}
```

```java
package andy.com.designpattern.type_interface.adapter;


/**
 * 对象的适配器模式
 * 模式所涉及的角色有：
 * 1. 目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
 * 2. 源(Adapee)角色：现在需要适配的接口。
 * 3. 适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。
 */
public class AdaptorObjectTest {


    /**
     * 现有的类
     */
    static class Adaptee {
        /**
         * 已经有的方法
         *
         * @return
         */
        public void existsMethod() {
            System.out.println("已有的方法");
        }
    }


    /**
     * 现在需要的接口
     */
    static interface Target {
        /**
         * 原adaptee有的方法
         */
        public void existsMethod();

        /**
         * 原adaptee没有的方法
         */
        public void newMethod();
    }

    /**
     * 适配器
     */
    static class Adapter implements Target {

        private Adaptee adaptee;

        public Adapter(Adaptee adaptee) {
            this.adaptee = adaptee;
        }

        @Override
        public void existsMethod() {
            this.adaptee.existsMethod();
        }

        @Override
        public void newMethod() {
            System.out.println("新的方法");
        }
    }


    public static void main(String[] args) {
        Adaptee adaptee = new Adaptee();
        Target t = new Adapter(adaptee);
        t.existsMethod();//调用老方法
        t.newMethod();//调用新方法
    }

}
```


### jdk中的例子
JDK中体现：
（1）java.io.InputStreamReader（该类继承了Read类，但要创建它的对象必须在构造函数中传入一个InputStream）(InputStream→Reader 字节到字符)
（2）java.io.OutputStreamWriter(OutputStream)

## Facade 外观(门面)模式
### 为什么引入
外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。
### jdk例子
tomcat 的 HttpServletRequest 实现就是一个Facade。

### 在以下情况下可以使用外观模式：

1. 当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。
2. 客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。
3. 在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。

### 抽象外观类的引入解决外观类的去缺点
外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。

```java
package andy.com.designpattern.type_interface.facade;

/**
 * 外观(门面模式)模式
 */
public class FacadeTest {

    static class SystemA{
        public void ops(){
            System.out.println("SystemA Operation");
        }
    }

    static class SystemB{
        public void ops(){
            System.out.println("SystemB Operation");
        }
    }

    static class SystemC{
        public void ops(){
            System.out.println("SystemC Operation");
        }
    }


    /**
     * 外观类
     */
    static public class Facade{

        /**
         * 提供一个统一接口
         */
        public void wrapOperation(){
            SystemA a = new SystemA();
            SystemB b = new SystemB();
            SystemC c = new SystemC();

            a.ops();
            b.ops();
            c.ops();
        }
    }

    public static void main(String[] args) {
        Facade f = new Facade();
        f.wrapOperation();
    }
}

```


## 组合模式 Composite模式
## 桥接模式(Bridge)

# 责任模式
## 单例模式
## 观察者模式
## 调停者模式
## 代理模式
## 责任链模式

### what
在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。

看看这个就够了
https://cloud.tencent.com/developer/article/1162235

### jdk例子
kafka中的producer拦截器 组成一个拦截器链 org.apache.kafka.clients.producer.ProducerInterceptor


## 享元模式(Fly Weight )

# 构造型模式
## Builder构建者模式
guava Cache
GsonBuilder

## 工厂模式
### 为什么要出现工厂方法。
解耦： 如果用new的话,创建者和使用者耦合在一起了。使用工厂方法的话，创建者是工厂。
#### 
简单工厂模式，工厂方法模式，抽象工厂模式
https://developer.aliyun.com/article/725085

抽象工厂是为了解决 如果使用工厂方法的话 工厂方法的类个数会爆炸。

Executors 
BeanFactory

## 原型模式
## 备忘录模式

# 操作形模式
## 模板方法(Template Method)模式
#### 为什么需要
模板方法模式是类的行为模式。准备一个**抽象类**，将**部分逻辑**以具体方法以及具体构造函数的形式实现，然后**声明一些抽象方法来迫使子类实现剩余的逻辑**。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
#### 具体
1. 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。

2. 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
```java
package andy.com.designpattern.template_method;

/**
 * #### 为什么需要
 * 模板方法模式是类的行为模式。准备一个**抽象类**，将**部分逻辑**以具体方法以及具体构造函数的形式实现，然后**声明一些抽象方法来迫使子类实现剩余的逻辑**。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
 * #### 具体
 * 1. 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。
 * <p>
 * 2. 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
 */
public class TemplateMethodTest {

    /**
     * 定义抽象类(以数据库为例)
     */
    static abstract class AbstractTemplate {


        //已经实现的业务代码
        private void logic1() {
            System.out.println("do logic1");
        }


        // 已经实现的业务代码
        public void logic2() {
            System.out.println("do logic2 ");
        }


        // 需要由子类实现的方法
        protected abstract void userLogic();


        // 模板方法
        public void logic() {
            System.out.println("开始整个逻辑");

            this.logic1();
            this.userLogic();
            this.logic2();

            System.out.println("整个逻辑执行结束");
        }
    }

    /**
     * 强制子类实现 userLogic 逻辑
     */
    static class ConcreteLogic1 extends AbstractTemplate{

        @Override
        protected void userLogic() {
            System.out.println("do a nice logic ");
        }
    }

    /**
     * 强制子类实现 userLogic 逻辑
     */
    static class ConcreteLogic2 extends AbstractTemplate{

        @Override
        protected void userLogic() {
            System.out.println("do a wonderful logic ");
        }
    }

    public static void main(String[] args) {
        AbstractTemplate l1 = new ConcreteLogic1();
        l1.logic();
        AbstractTemplate l2 = new ConcreteLogic2();
        l2.logic();
    }
}

```

1. AQS 只需要实现 tryRequire() tryRelease()
2. Arrays.sort() 传入的对象需要实现 Comparable的接口的子类，必须实现compareTo 也有模板方法的意思。
3. Spring 中的模板方法
```java
public abstract class AbstractApplicationContext extends 
DefaultResourceLoader implements ConfigurableApplicationContext {
...

@Override
	public void refresh() throws BeansException, IllegalStateException {
		synchronized (this.startupShutdownMonitor) {
			// Prepare this context for refreshing.
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory.
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context.
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses.
				postProcessBeanFactory(beanFactory);

				// Invoke factory processors registered as beans in the context.
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.
				registerBeanPostProcessors(beanFactory);

				// Initialize message source for this context.
				initMessageSource();

				// Initialize event multicaster for this context.
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.
				onRefresh();

				// Check for listener beans and register them.
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.
				finishRefresh();
			}

			catch (BeansException ex) {
				if (logger.isWarnEnabled()) {
					logger.warn("Exception encountered during context initialization - " +
							"cancelling refresh attempt: " + ex);
				}

				// Destroy already created singletons to avoid dangling resources.
				destroyBeans();

				// Reset 'active' flag.
				cancelRefresh(ex);

				// Propagate exception to caller.
				throw ex;
			}

			finally {
				// Reset common introspection caches in Spring's core, since we
				// might not ever need metadata for singleton beans anymore...
				resetCommonCaches();
			}
		}
	}
...


	/**
	 * Template method which can be overridden to add context-specific refresh work.
	 * Called on initialization of special beans, before instantiation of singletons.
	 * <p>This implementation is empty.
	 * @throws BeansException in case of errors
	 * @see #refresh()
	 */
	protected void onRefresh() throws BeansException {
		// For subclasses: do nothing by default.
	}

}
``` 
refresh 就是一个模板方法， onRefresh 就是一个需要子类自己实现的方法。




## 策略模式
#### 设计模式——策略模式及在jdk中的应用(ThreadPoolExecutor 4种拒绝策略)
https://blog.csdn.net/qqqqq1993qqqqq/article/details/77369582


https://www.cnblogs.com/java-my-life/archive/2012/05/10/2491891.html

## 命令模式
### what
1. 将命令用command进行封装
2. 解决的问题：通过command对象将调用者invoker和命令执行者receiver的解耦
3. 添加新逻辑只需要添加新的Command即可，不用修改已有的代码。
1. hystrix
https://cloud.tencent.com/developer/article/1477400

## 解释器模式
## 状态(state)模式

# 扩展模式
## 装饰器模式
## 迭代器模式
## 访问者模式

