---
layout: post
title: redis运维 备忘
date: 2020-9-9 14:32:00
categories:  java maven
---
### 1. 持久化 RDB AOF
#### 1. redis持久化的机制 
redis有RDB和AOF两种持久化机制，下次重启时候利用之前持久化的文件即可恢复数据。

#### 2.RDB
RDB是把当前**进程数据生成快照保存到硬盘**的过程，可以手动也可以自动触发。

##### 1.手动rdb
```shell
127.0.0.1:6379> set aabb ccdd
OK
127.0.0.1:6379> bgsave
Background saving started

```

log 信息
```java
8906:M 10 Sep 10:03:38.417 * Background saving started by pid 8995
8995:C 10 Sep 10:03:38.568 * DB saved on disk
8995:C 10 Sep 10:03:38.568 * RDB: 6 MB of memory used by copy-on-write
8906:M 10 Sep 10:03:38.643 * Background saving terminated with success

```


##### 2.自动rdb
```shell
#rdb 10秒钟有3次修改就作rdb
save 10 3
```

执行三次set   

```shell
127.0.0.1:6379> 
127.0.0.1:6379> set aabb ccdd
OK
127.0.0.1:6379> set aabb ccdd1
OK
127.0.0.1:6379> set aabb ccdd12
OK
127.0.0.1:6379> set aabb ccdd124
OK
```

log信息   

```java
9184:M 10 Sep 10:13:03.227 * Background saving started by pid 9195
9195:C 10 Sep 10:13:03.240 * DB saved on disk
9195:C 10 Sep 10:13:03.242 * RDB: 0 MB of memory used by copy-on-write
9184:M 10 Sep 10:13:03.328 * Background saving terminated with success

```

##### 3. rdb过程
rdb是使用fork一个子进程在后台执行的。
1. 判断是否已经有rdb/aof子进程，如果存在就返回。
2. fork一个子进程，fork会阻塞父进程
3. 父进程fork完成后，bgsave返回Background saving stated.
4. 子进程根据父进程内存生成临时快照文件，并对原文件做快照替换。
5. 进程发送信号给父进程表示完成。


下面是状态。
```shell
127.0.0.1:6379> info stats
# Stats
total_connections_received:6
total_commands_processed:100007
instantaneous_ops_per_sec:0
total_net_input_bytes:10089094
total_net_output_bytes:504551
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
evicted_keys:51083
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:322  #上一次fork 使用了 322微妙(阻塞了父进程322微秒)
migrate_cached_sockets:0
127.0.0.1:6379> 

```


```shell
127.0.0.1:6379> info Persistence
# Persistence
loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1599708110 #上次开始rdb的时间
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:0
rdb_current_bgsave_time_sec:-1
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
127.0.0.1:6379> 
```

##### 4 rdb优缺点
###### 优点
1. rdb是**压缩**过的二进制文件，是一个时间点的快照。适用于全量备份，全量复制等场景，用于灾难恢复。
2. redis加载rdb也远远快于AOF

###### 缺点
1. 无法实时的持久化，或者秒级持久化。
bgsave需要fork进程，非常耗时，线上8G内存的redis实例，fork需要200毫秒。如果一个qps是5万的话，就影响了1/5，大约1万个请求。


#### 3.AOF(append of file)
##### 1. 原理
aof以独立日志的方式记录每次写命令，重启时候在重新执行aof文件中的命令达到恢复目的。
**aof解决了吃鸡化的实时性**

#### 2#. aof工作流程
1. 写入命令写到aof_buf
2. aof缓冲根据**策略**向硬盘做**同步**操作
3. aof文件越来越大，需要定期对aof重写，达到压缩的目的
4. redis重启时候，可以加在aof文件进行数据恢复

##### 注意事项
1. aof使用文本协议格式
有很好的兼容性和可读性。
2. aof不直接写入磁盘，使用aof_buf 缓冲区
单线程，防止io阻塞，可以有不同的策略将缓冲同步到磁盘，在性能和安全性做出平衡。

##### 3. aof缓冲区同步策略
1. alaways 命令写aof_buf后调用fsync同步到磁盘文件，然后再返回。
2. everysec 命令写入aof_buf后调用write操作，立即返回，由一个单独的同步线程每秒做一次fsync同步。
3. no 命令写入aof_buf后调用write操作，立即返回，不对aof文件做fsync同步。

**建议使用everysec**，如果突然宕机，值丢失1秒左右的数据。

##### 4. aof文件重写
命令不断写入 aof会越来越大，重写机制可以解决这个问题。 
aof文件变小了 redis加载aof文件也会更快。

###### 1. 为什么重写可以使得命令变小
1. 进程内超时的数据可以不用写了。
2. 多条命令可以合并，比如 lpush l a , lpush l b 可以合并为 lpush l a b
3. 旧的aof文件里的无效命令已经可以不用写了。

#### aof重写触发时机
##### 1. 手动触发
bgrewriteaof命令

##### 2. 自动触发
```shell
#aof
appendonly yes
appendfilename "aof6379.aof"
#重写
#同时满足下面2个才进行重写
#当aof文件大于64M才重写
auto-aof-rewrite-min-size 40M
#当aof比上一次aof后的文件大的比例，比如上次是100m percentage设置为20  120M的时候就可以进行重写了。
auto-aof-rewrite-percentage  20

```


下面是自动开始aof rewrite的过程
```
13195:M 10 Sep 14:41:23.925 * Starting automatic rewriting of AOF on 6405058400% growth
13195:M 10 Sep 14:41:23.926 * Background append only file rewriting started by pid 13404
13195:M 10 Sep 14:41:25.071 * AOF rewrite child asks to stop sending diffs.
13404:C 10 Sep 14:41:25.071 * Parent agreed to stop sending diffs. Finalizing AOF...
13404:C 10 Sep 14:41:25.071 * Concatenating 0.48 MB of AOF diff received from parent.
13404:C 10 Sep 14:41:25.098 * SYNC append only file rewrite performed
13404:C 10 Sep 14:41:25.099 * AOF rewrite: 9 MB of memory used by copy-on-write
13195:M 10 Sep 14:41:25.214 * Background AOF rewrite terminated with success
13195:M 10 Sep 14:41:25.214 * Residual parent diff successfully flushed to the rewritten AOF (0.62 MB)
13195:M 10 Sep 14:41:25.215 * Background AOF rewrite finished successfully

```

重写aof文件后问价大小的对比,**aof文件从60多M变为了13M**
```shell
[www@localhost tests]$ ls data -lah
总用量 71M
drwxrwxr-x. 2 www www   43 9月  10 14:41 .
drwxrwxr-x. 4 www www   65 9月  10 14:40 ..
-rw-r--r--. 1 www www  61M 9月  10 14:41 aof6379.aof
-rw-rw-r--. 1 www www 5.5M 9月  10 14:41 dump6379.rdb
[www@localhost tests]$ ls data -lah
总用量 19M
drwxrwxr-x. 2 www www   43 9月  10 14:41 .
drwxrwxr-x. 4 www www   65 9月  10 14:40 ..
-rw-rw-r--. 1 www www  13M 9月  10 14:41 aof6379.aof
-rw-rw-r--. 1 www www 2.8M 9月  10 14:41 dump6379.rdb
```

##### 3. aof rewrite的过程
1. 如果正在执行aof 直接返回
2. 如果正在执行bgsave要等到bgsave完成后再执行 aof重写
3. 父进程fock子进程，与bgsave开销一样。
4. 1 主进程继续响应命令，将写命令写入 aof缓冲区，并根据策略做同步处理
4. 2 子进程只能看到fork时候的内存快照，fock后父进程响应的写命令修改的这些新数据，子进程看不见。 redis使用 aof重写缓冲区来保存这部分新数据。防止数据丢失。
5. 子进程根据内存快照，按照命令合并等规则写入新的aof文件。每次写入aof-rewrite-incremental-fsync 字节(默认32M)的数据。防止磁盘阻塞
6. 1 先的aof文件写入后，发送信号给父进程。
6. 2 父进程把aof重写缓冲区的数据写入到新的aof文件。
6. 3 替换老的aof文件。


### 重启后持久化文件加载
 优先加载aof
 ![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/redis-aof-rdb-reload.png) 


### 优化
#### 1. fork
##### 问题
1. aof或者rdb都需要操作系统fork操作。fork是很重的一个操作。
2. fork时候不需要复制父进程的内存空间，但要复制父进程的**内存页**，10G内存也需要复制20Md内存页。
3. 经验值是10G内存大概需要20毫秒fork时间。


##### 怎么优化
1. 单个redis实例最好不要操作10G内存。
2. redis尽量使用物理机，使用用fork很高效的虚拟机。不用虚拟机。
3. 降低fork频率，不使用自动rdb，aof 合理配置 减少不必要的全量复制。


