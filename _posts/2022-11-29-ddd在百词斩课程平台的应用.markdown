---
layout: post
title: ddd在百词斩课程平台的应用
date: 2022-10-8 14:32:00
categories:  测试
---

# 与DDD的相遇
在12年在一家外企工作，第一次听说DDD，但是当初职位比较低，只负责模块级别的工作，没有能深入体会过DDD一些工作，反而感觉一些模型各种组合转换，挺麻烦的。后来大部分的职业生涯都是在移动互联网领域，做的系统的关注点多是“系统能承受多高的qps”，“系统能不能应对快速(突然)上涨的请求量” ，这一类运行效率(并发)相关的问题。有的时候可能为了做到极致的运行效率，做出一些很丑陋但是很“快”的设计。 像DDD这类的理论，根本没有放在心上，一直觉得DDD这类老古董是10多年前(2000年初)解决企业级的服务才会使用到的。当然这很幼稚，直到后买做的系统越来越多，也辗转几家业务特别复杂大头部大公司后，接触到了百万行级别的代码，几十个上百个服务相互调用的超级复杂场景，让我重新意识到了DDD的作用。
后来很幸运回到老东家有机会从0到1开始做“课程平台(中台)”，在梳理好业务后。我感觉课程平台在未来一定是一个自身业务比较复杂，而且还需要和很多第三方系统集成，同时还需要快速响应变化的复杂系统。 基于上面的假设下，我把尝试把DDD的一些思想与最佳实践引入到课程平台(当然有很多不完善)。课程平台开发一年了，经历了几十轮的迭代，代码还能保持比较整洁~ 具备比较强的扩展性~。

# DDD不是万能的解药
技术是死的，项目是活的，变化的。一个项目可以是逻辑比较简单，但是并发很高的。 也可以是业务很复杂，但是并发不高的系统。 同一个项目在前期可能是一个简单的项目，但是可以预见的中后复杂度能高几个量级。DDD并不是解决所有场景的万能神药。一些简单的业务的项目，没有必要使用DDD，能简单crud能完成的，跟着直觉也能写好。DDD用在复杂度比较高的系统的，您可能会问什么是“复杂度高”？ 其实也没有什么比较确定的回答，我的一个经验是你用脑袋已经想不太清楚，画几张草图都不一定能理清楚的项目，就可能是“复杂度搞”的项目了。

# What ?
## 什么是DDDD
DDD = Domain Driven Design 领域驱动设计。里面的核心是Domain。问题回到了什么是Domain？《领域驱动设计》里面的回答是“每个软件程序是为了执行用户的某项活动，或是满足用户的某种需求。这些用户应用软件的问题区域就是软件的领域。”。说了这么大一堆，我自己总结领域就是具体业务，比如你做的系统是面向医院的系统，你的领域就可能有“挂号域”，“取药域”，“开单域”等等。可以看到领域其实是跟具体的技术无关的，是走在技术之前的，在讨论领域的时候，还没有决定使用什么样的具体技术。这里一些程序员在分析复杂业务的时候经常犯的错误，那就是一来就陷入“技术泥潭”，在没有梳理好业务领域的时候就开始考虑技术上的一些事情了。 技术复杂度和领域复杂度是两个维度的复杂度，在一些项目中而主要的复杂性并不在技术上，而是来自领域、当领域复杂性在设计中没有得到解决时，技术上花再多的心思也不能解决根本问题。

## 领域建模
DDD是一种思想，实现DDD主要还是依靠“面向对象”编程，也即在某个领域把核心知识进行抽象成具体的一个一个的模型，例如在“挂号”这个领域下，“挂号单”就是一个核心领域模型。
领域模型是对现实的一种抽象，一定要做到准确，但是很多复杂的场景下想要一下子找到一个准确合理的模型并不现实，所以模型的筛选也是变化的，有些不合理的模型会在后期被抛弃，被一些更为合理的模型替代。

### 三个level的设计
DDD（领域模型设计）算是一种非常高纬度的设计，属于“业务架构”这个维度的事情~ 他主要是划分出一个个的子领域，比如医院系统的 “挂号子域”和“取药子域”。并且规定了一些这些领域之间的边界。边界内的区域我们叫他“bounded context”界限上下文。
领域模型设计之下，是具体的一个一个子领域，以及各个领域内的具体模型，这些子领域怎么进行交互(通信)。 




# 课程平台的DDD实践
## 课程平台有 两块大领域，一是课程内容制作，一块是用户期课。我们可以分为两个界限上下文。