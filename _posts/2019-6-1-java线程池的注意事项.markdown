---
layout: post
title:  java线程池注意事项
date:   2019-6-1 14:32:00
categories: java 线程池
---

java线程池用得很多，主要的实现类是 **ThreadPoolExecutor**是**ExecutorService**的具体实现。  
***下面是构造函数***
```
 public ThreadPoolExecutor(int corePoolSize,       //初始线程数量
                              int maximumPoolSize, //最大线程数量
                              long keepAliveTime, //线程空闲多久后回收
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue, //存放任务的对垒
                              RejectedExecutionHandler handler) {//当workQueue满了的时候异常处理
        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
             Executors.defaultThreadFactory(), handler);
    }
```

#### ThreadPoolExecutor有几点需要注意：
1. 最大线程数目的选取
2. 优雅的关闭线程池
3. 选取适当的 拒绝执行策略：RejectedExecutionHandler


#### 1. ThreadPoolExecutor 最大线程数的选取(maximumPoolSize)
##### 根据业务类型是 **io密集型**还是**cpu密集型**

 * 对于CPU密集型可以使用 maximumPoolSize=CPU数目+1;
 * 对于IO密集型可以使用 maximumPoolSize=2*CPU数目+1;
 * 混合型的: maximumPoolSize=CPU数据*(1+waitTime/computeTime) 比如核心数为4，一个任务使用4ms为IO，1ms秒计算，那就选取 (1+4)*4=20。这是cpu跑满的情况，如果你只想cpu利用率为50%。那就是20\*0.5=10;

#### 2.优雅地关闭pool
注意: shutdown 和 shutdownNow的语义。
 
```
   pool.shutdown(); // 这里是禁止新的任务提交，
   try {
      // 等待正在执行的任务结束，这里等60秒 ，阻塞的
      if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
        pool.shutdownNow(); // 关闭正在执行的任务。
        // 再等待50秒
        if (!pool.awaitTermination(60, TimeUnit.SECONDS))
            System.err.println("Pool did not terminate");
      }
    } catch (InterruptedException ie) {
      // 如果awaitTermination被interrupt 立即关闭线程。
      pool.shutdownNow();
      // Preserve interrupt status
      Thread.currentThread().interrupt();
    }
```

#### 3.选取适当的“拒绝执行策略” RejectedExecutionHandler
当线程池不再接受任务时候再加入任务 由RejectedExecutionHandler来处理
默认有四种处理方式:
1. AbortPolicy，直接抛异常
2. DiscardPolicy,直接丢掉:
3. DiscardOldestPolicy 丢掉最老的，立即执行最新的 
4. CallerRunsPolicy 不在线程池中执行这个task，直接在调用线程中执行


#### 4.  线程池的参数 corePoolSize 和 maxPoolSize
```java

public class ThreadPoolExecutor extends AbstractExecutorService {

  ...
  ...
  /**
     * Executes the given task sometime in the future.  The task
     * may execute in a new thread or in an existing pooled thread.
     *
     * If the task cannot be submitted for execution, either because this
     * executor has been shutdown or because its capacity has been reached,
     * the task is handled by the current {@code RejectedExecutionHandler}.
     *
     * @param command the task to execute
     * @throws RejectedExecutionException at discretion of
     *         {@code RejectedExecutionHandler}, if the task
     *         cannot be accepted for execution
     * @throws NullPointerException if {@code command} is null
     */
    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        /*
         * Proceed in 3 steps:
         *
         * 1. If fewer than corePoolSize threads are running, try to
         * start a new thread with the given command as its first
         * task.  The call to addWorker atomically checks runState and
         * workerCount, and so prevents false alarms that would add
         * threads when it shouldn't, by returning false.
         *
         * 2. If a task can be successfully queued, then we still need
         * to double-check whether we should have added a thread
         * (because existing ones died since last checking) or that
         * the pool shut down since entry into this method. So we
         * recheck state and if necessary roll back the enqueuing if
         * stopped, or start a new thread if there are none.
         *
         * 3. If we cannot queue task, then we try to add a new
         * thread.  If it fails, we know we are shut down or saturated
         * and so reject the task.
         */
        int c = ctl.get();
        if (workerCountOf(c) < corePoolSize) {
            if (addWorker(command, true))
                return;
            c = ctl.get();
        }
        if (isRunning(c) && workQueue.offer(command)) {
            int recheck = ctl.get();
            if (! isRunning(recheck) && remove(command))
                reject(command);
            else if (workerCountOf(recheck) == 0)
                addWorker(null, false);
        }
        else if (!addWorker(command, false))
            reject(command);
    }
    ....
    ....
}
```


>1. If fewer than corePoolSize threads are running, try to
>   start a new thread with the given command as its first
>   task.

如果线程数小于corePoolSize，当有新任务时候，启动一个新线程。

> 3. If we cannot queue task, then we try to add a new
>  thread.  If it fails, we know we are shut down or saturated
>  and so reject the task.

只有在不能继续queue任务的时候，也就是队列满了的时候才会考虑添加一个 task。所以如果队列没有满的情况下，最多只有corePoolSize个线程在执行。