---
layout: post
title: redis基本操作 备忘
date: 2020-9-8 14:32:00
categories:  java maven
---
### 1. 命令行直接操作
···shell
[www@localhost tests]$ redis-cli 
127.0.0.1:6379> set aa 111
OK
127.0.0.1:6379> exit
[www@localhost tests]$ redis-cli get aa
"111"

···

### 2. 优雅关闭redis
save 表示先生成次持久化文件
```shell
[www@localhost tests]$ redis-cli shutdown save
[www@localhost tests]$ tree .
.
|-- data
|   `-- dump6379.rdb
|-- logs
|   `-- 6379.log
|-- redis-6379.conf
`-- start.sh

2 directories, 4 files

```


### 3. 常用命令
1.  keys * 列出所有健
2. dbsize 健总数
3. exists key 是否存在某个键
4. del key 删除
5. expire key 设置key的过期时间
6. type key 返回类型


### 4.5种数据结构
string, hash, list, set, zset.
这五种是对外的数据结构，每一种数据结构内部有自己的**编码**，内部编码可以使用**object encoding key**来查看

**这种设计的好处**:
改动内部编码不影响外部编码，也是一种分层的设计思想。

 ![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/redis-1.png)


#### 1.字符串
字符串的实际值可以是: **简单字符串，复杂字符串，数字(整数，浮点数)，二进制**

最大不能超过512M
##### 命令；

###### 1. set 
1. set key value [ex seconds] [px milliseconds] [nx|xx]    
2. ex 秒级过期时间
3. px 毫秒级过期时间
4. nx 表示not exist 健不存在才能设置成功，用于添加 ，redis也提供了setnx
5. xx 表示exists 健存在才能设置成功，用于更新。

```shell
127.0.0.1:6379> set b 1 ex 100  nx
OK
127.0.0.1:6379> set b 1 ex 100  nx #第二次会失败，因为已经存在了
(nil)
127.0.0.1:6379> ttl b
(integer) 87
127.0.0.1:6379> ttl b
(integer) 86
127.0.0.1:6379> 

```
###### 2. mset mget 批零操作
```shell
127.0.0.1:6379> mset a 1 b 2 c 3 
OK
127.0.0.1:6379> mget a b
1) "1"
2) "2"

```

mset 和 mget 主要是节约了网络时间。因为一次请求的网络时间可能比redis操作还多。
###### 2. 数字操作 incr decr incrby decrby incrbyfloat
如果不是数字会返回错误
```shell
127.0.0.1:6379> set num a""
OK
127.0.0.1:6379> incr num
(error) ERR value is not an integer or out of range
127.0.0.1:6379> 
127.0.0.1:6379> set num1 1
OK
127.0.0.1:6379> incr num1 
(integer) 2
127.0.0.1:6379> incr num1 
(integer) 3
127.0.0.1:6379> incrby num1 10 
(integer) 13

```

 ![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/redis-string.png)


### redis单线程架构
1. 使用io多路复用
2. 命令会进入一个队列然后依次执行
3. 单线程不会有并发问题

#### 为什么快?
1. 内存操作
2. 单线程，没有上下文切换，也没有线程并发的问题
3. epoll 非阻塞io多路复用

#### 问题
某个命令执行时间过长，造成阻塞，很致命
