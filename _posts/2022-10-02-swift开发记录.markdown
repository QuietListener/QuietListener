---
layout: post
title: swift开发记录
date: 2022-10-2 20:32:00
categories:  客户端
---

# 一些概念
## struct vs class
不同点
|  struct   | class  |
|  ----  | ----  | 
| 传值  | 传引用|
| 被传值或者赋值的时候会copy  | 传的事引用不会copy|
| copy on write是不可变的  | 引用计数|
| 用在函数式编程  | 用于面向对象编程|
| 不可以继承  | 可以继承(单根继承)|
| 如果需要改变需要显示指定(mutating)  |可以改变|
|一般用在view等|一般用在vm|



## generics 泛型

跟java差不多

```swift
//表示 CardContent是Equatable的可以用 == 进行比较
struct MemoryGame<CardContent> where CardContent :Equatable{


    struct Card{
        var content: CardContent;
    }
}

```


## 函数
函数是第一等公民，可以作为参数来传递

(Int,Int) -> Card 表示可以接受一个两个参数是Int返回Card的函数： 
```swift

//表示 CardContent是Equatable的可以用 == 进行比较
struct MemoryGame<CardContent> where CardContent :Equatable{
    
    var cards: Array<Card>  = Array<Card>();
    var onlyFaceUpCardIndex: Int?;
    
    init(_ count: Int,createCard: (Int,Int) -> Card){
        for index in 0..<count {
            cards.append(createCard(index,index*2))
            cards.append(createCard(index,index*2+1))
        }
    }
}
```

## enum枚举
swift的枚举可以带参数
![redis](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2022-10-02-enum.png)

## mvvm
viewModel将model和view解耦
![redis](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/202210-02-mvvm.png)

## @State
1. View一般是不可变的。View只是按照模型(model)中的数据显示。但是View中也可以有一些自己的数据，比如动画的时间，@State一般用在View中，作为View中的私有的数据。

2. @State还有  @ObservedObject的功能，@State的参数改变了，会rebuild View的Body。

3. @State修饰的参数会指向内存的某个地方，@State修饰的数据生命周期于View的生命周期相同，rebuild View会重新指向这个内存，不会清除@State的数据的。

## 控制
private private(set)

private 可以修饰 函数 struct 参数等。


## 修改参数
    let 表示一旦赋值就不可改变
    var 表示属性可以被改变

## computed variable 可计算的属性
```swift

var onlyFaceUpCardIndex: Int? {
        get{ //get获取值的时候执行
            cards.indices.filter({cards[$0].isFaceUp == true}).oneAndOnly
        }
        set{ //赋值的时候执行 newValue是赋的新值
            cards.indices.forEach({index in cards[index].isFaceUp = index==newValue})
        }
    }
```

## 布局 Layout

1. HStack 
2. VStack
3. ZStack
4. LazyVStack
5. ScrollView 
6. Spacer 
7. Divider
8. RoundedRectangle
9. GeometryReader 用来获取父View的大小
10. @ViewBuilder
    @ViewBuilder可以用在方法和参数上 
    @ViewBuilder用在方法上 可以 List of View
    ZStack的源码中 content也是一个@ViewBuilder修饰的
```swift
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ZStack<Content> : View where Content : View {

    /// Creates an instance with the given alignment.
    ///
    /// - Parameters:
    ///   - alignment: The guide for aligning the subviews in this stack on both
    ///     the x- and y-axes.
    ///   - content: A view builder that creates the content of this stack.
    @inlinable public init(alignment: Alignment = .center, @ViewBuilder content: () -> Content)

}
```