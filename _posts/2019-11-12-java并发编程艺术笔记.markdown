---
layout: post
title: java并发编程艺术笔记
date: 2019-10-29 14:32:00
categories:  java review
---

# 1. 并发编程的挑战
## 1. 并发编程会遇到的挑战
死锁，上下文切换频繁
## 2.挑战1: 上下文切换
>可以看看这篇文章 https://www.linuxblogs.cn/articles/18120200.html

### 1. 什么是上下文切换
1.cpu是分时处理的，会给每个线程分配一个时间片，当这个时间片用完后会，会保存状态，然后切换到下一个任务。下一次切会某个任务时候，需要恢复保存的状态。 这就是上下文切换。，上下文切换需要保存状态(寄存器，缓存等) 所以会影响效率。

### linux 查看上下文切换
>#每秒打印一下当前状态
>vmstat -w 1     


```shell
[www@iZbp15pf7sr2cgwbyqi1inZ ~]$ vmstat -w 1
procs -------------------memory------------------ ---swap-- -----io---- --system-- -----cpu-------
 r  b       swpd       free       buff      cache   si   so    bi    bo   in   cs  us sy  id wa st
 0  0          0     149856     146620     914276    0    0     1    14    1    1   1  0  99  0  0
 0  0          0     149684     146620     914276    0    0     0     8 1082 2211   1  0  99  0  0
 1  0          0     149716     146620     914276    0    0     0     8 1113 2253   1  1  98  0  0
 0  0          0     149716     146620     914276    0    0     0     8 1093 2249   1  1  98  0  0

```

1. cs:上下文切换次数
2. r:就绪队列的长度
3. us和sy:用户cpu时间和系统cpu时间使用率
4. in:(interupt)中断次数

**cs一般几百到1万都是正常的**  
**r值如果大于cpu核数就可能有大量争抢cpu出现。**


### 1. 怎么解决上下文切换
1. 减少锁的使用，将数据分段，不同线程处理不同段。
2. CAS(comapre and swap),不用加锁(其实是乐观锁)
3. 减少线程的创建，比如任务少，线程多，很多线程会处于等待状态，从等待到running就会有一次上线文切换。
4. 协程: 协程可以在单线程里实现任务调度和切换

#### 1. **查看java线程状态**
```shell
[www@bcz-app-study-record-consumer-1 ~]$ jstack -l 16015 | grep java.lang.Thread.State | awk '{print $2$3$4$5}' | sort | uniq -c 
     36 RUNNABLE
      1 TIMED_WAITING(onobjectmonitor)
     18 TIMED_WAITING(parking)
      3 TIMED_WAITING(sleeping)
      2 WAITING(onobjectmonitor)
     28 WAITING(parking)
```

#### 2. java线程的状态
1. NEW 线程创建了但是还没有启动
2. RUNNABLE:正在运行的任务，也可能在等待状态，比如等待IO
3. BLOCK:阻塞状态，线程要进入一个临界区，但是没有获德锁
4. WATING: 执行了不带世家参数的 wait, join，或者 LockSupport.park方法
5. TIMED_WATING: 执行了带时间参数的 wait ,join，或者 LockSupport.parkNanos/LockSupport.parkUntil
6. TERMINATED: 终止状态


## 挑战2：死锁
### 解决死锁的办法
1. 使用定时锁(本质是被动超时的机制)
2. 主动检查,等待图(wait-for graph)中有环就有死锁，然后强制释放某一个线程获取的资源。mysql使用的方法
3. 加锁的顺序必须一致。
4. 避免一个线程同时获取多个锁。



# 2. java并发机制的底层原理
## 1. 可见性
**可见性指的是当一个线程修改一个共享变量的时候，另一个线程能读到这个修改值。**
synchronized 和 volatile都可以保证变量的可见性。
## 2. volatile
>  volatile [ˈvɒlətaɪl] adj.易变的;无定性的;无常性的;可能急剧波动的;不稳定的;易恶化的;易挥发的;易发散的

如果一个变量被声明为volatile java内存模型(JMM)保证所有线程看到这个变量的值是一致的。

#### 1. volatile 修饰的变量有什么不同
volatile修饰的变量有两个特殊处理:
1. 将这个变量在缓存中的副本写回到系统内存。
2. 让其他cpu的缓冲了改变量失效(必须去系统内存中去取，不能从缓存中去取) 这个由**cpu的缓冲一致性协议**来保证。

## 3. synchronized
java每一个对象都可以是锁。
1. 普通同方法 锁是当前的实例对象
2. 静态同步方法，锁是当前类的class对象
3. 同步方法块，所以synchronized括号里的对象。

#### 1. 实现原理
##### 1. 同步块
对于同步块是在同步块开始插入monitorenter指令，在同步块结束插入monitorexit指令。
例如
```java
 public void increase() {
        synchronized (this) {
            i++;
        }
    }
```

下面是字节码
```java
public void increase();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
        stack=3, locals=3, args_size=1
            0: aload_0
            1: dup
            2: astore_1
            3: monitorenter // 进入同步方法
            4: aload_0
            5: dup
            6: getfield #2  // Field i:I // i++ start
            9: iconst_1
            10: iadd
            11: putfield #2 // Field i:I // i++ end 总共有4个指令，说明++操作不具有原子性
            14: aload_1
            15: monitorexit // 正常退出同步方法
            16: goto 24
            19: astore_2
            20: aload_1
            21: monitorexit // 异常退出同步方法
            22: aload_2
            23: athrow
            24: return
        Exception table:
            from    to  target type
               4    16    19   any # 进入异常处理流程，第2个monitorexit保证在出现异常时，monitorenter与monitorexit成对出现
              19    22    19   any
```

##### 2.同步方法  
对于**同步方法**是检查方法有没有**ACC_SYNCHRONIZED**标志，来判断要不要去竞争锁

```java
public synchronized void increase() {
        i++;
    }
```

**字节码**

```java
public synchronized void increase();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED // ACC_SYNCHRONIZED指明为同步方法
    Code:
        stack=3, locals=1, args_size=1
            0: aload_0
            1: dup
            2: getfield #2  // Field i:I
            5: iconst_1
            6: iadd
            7: putfield #2  // Field i:I
            10: return
```


#### 1. 重量级锁 MonitorObject
每一个java对象都可以作为锁。具体实现是每一个对象都有一个关联的MonitorObject，MonitorObject使用C++实现,有下面一些属性
1. ower:拥有该monitor的线程
2. entrySet：当一个线程需要获取 Object 的锁时，会被放入 EntrySet 中进行等待 线程处于BLOCKED 状态
3. waitSet: 调用 wait 方法将锁释放，进入 wait set 中阻塞进行等待，其它线程在这个时候有机会获得锁 处于WAITTING状态
4. 重入计数器: 重入次数


### 1. synchronized锁优化
#### 1. 原理:MarkWord
每一个对象的对象头都由2部分组成，**第一部分**存放自生对象运行时数据: hashcode,GC分代年龄等，这一部分叫做**Mark Word**。**第二部分**存储指向方法区对象类型数据的指针。
MarkWord就跟锁优化息息相关

**MarkWord 只有64(或者32)字节，在不同的状态下代表不同的语义(为了节约存储空间)。**

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/20200701-markword.png)

ObjectMonitor是**悲观锁**，需要操作系统的支持，非常耗资源。 java 1.6以后使用**偏向锁**和**轻量级**锁对synchronized进行锁优化， **偏向锁**和**轻量级**是**乐观锁**,使用CAS原子操作实现，在某些情况下会有效率。

##### 1. 偏向锁
##### 2. 轻量级锁

#### 2. 锁升级
使用synchronized时候，会优先使用偏向锁，如果有竞争出现会使用 轻量级锁，如果还有竞争再使用重量级锁。


## 1. CAS实现的原子操作的问题
### 1. ABA问题
ABA问题是 如果一个值原来是A，变成了B，又变成了A，那么CAS检查时候会认为没有变化，但是实际上是变化了的。 
**解决办法**：加入版本号。

### 2. CAS会自旋，消耗cpu资源
### 3. CAS只能一次处理一个变量。

# 3. java内存模型(JMM java memory model)
## 1. 理论上多线程“通信”的2个模型
### 1. 共享内存
共享内存模型里，线程间共享公共状态，通过对内存中公共状态的读写来进行通信。在对公共状态进行写的时候就需要同步，而且同步是显示的。
**java使用共享内存模型**

### 2. 消息传递模型
消息传递模型不需要同步，因为消息发送，天生就有先后顺序了。



## java内存模型 JMM
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/20200701-jmm.jpg)
1. 共享变量存放在主存中，每个线程有一个私有的本地内存(其实是缓存，写缓存，寄存器等)。
2. 线程的本地内存存放的是共享变量在主存中的副本，（相当于一个共享内存的缓存）
3. AB线程要通信的话，需要下面步骤:1. 线程A把本地内存贡献变量修改后刷新到主存，2. 线程B到主存去读取A更新过的共享变量。   
**上面就是线程A向线程B发送消息的过程**




### 1. 指令重排
#### 1.3种指令重排
java为了提高性能，会进行指令重排序，java从源代码到最终的执行指令序列，可能要经过3种指令重排序
1. 编译器优化重排序  编译器在不改变单线程程序语义的前提下，重新安排语句的执行顺序
2. 指令级并行重排序  处理器使用指令并行技术，如果没有数据依赖，可以改变语句对应机器指令的执行顺序
3. 内存系统重排序    处理器使用缓存来读/写缓冲区，这使得加载和存储操作看上去可能是乱序执行。

#### 2.怎么规避指令重排带来的问题
 对于1 编译器重排，java编译器会禁止特定类型的编译重排。对于2，3 JMM处理规则会要求编译器在生成指令序列时候，插入特定类型的**内存屏障**(Memory Barries)指令，**内存屏障**会禁止特定的处理器重排序

内存屏障有下面4类
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2020-07-10-memory-barrier.jpg)

#### 3. happen-before
java使用JSR-133内存模型,JSR-133使用happen-before概念来说明操作之间的**可见性**，**如果一个操作的结果需要对另一个操作可见**，那么这两个操作就必须要存在**happen-before**关系。这两个操作可以是一个单线程内的，也可以是两个线程之间的。

**为什么要有happen-before规则?**
一个happen-before规则对应一个或者多个编译器或者处理器重排规则，程序员只需要知道JMM提供的happen-before规则，不需要去理解复杂重排规则。

下面是与程序员相关的happen-before规则
1. 程序顺序规则:一个线程找那个的每个
2. 监视器锁规则： 一个锁的解锁，happen-before与随后对这个锁的加锁
3. volatile变量规则: 对一个volatile的写happen-before于任意后续对这个volatile域的读
4. 传递性： A happen-before B，B happen-before C 那么 A happen-before C.

#### 4. 数据依赖性
如果两个操作访问同一个变量，如果其中有一个为写操作，这两个操作之间就有依赖性。如果交换这两个操作的顺序，就会改变执行结果。 **这里的操作是指在单线程内的两个操作**。  **编译器和处理器在处理重排序时，会准守依赖性，不会改变有依赖关系的操作之间的顺序**


#### 5.java的 同步状态下的顺序一致性
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-7-11-syc-demo-1.jpg)

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2020-09-07-resort.jpg)

**锁能保证线程间的同步，但是在单线程的临界区时候可能会有重排序。但是临界区的重排不能“逸出”到临界区外**

### 2. volatile的内存语义
1. 可见性: 对一个volatile变量的写入，能立即让其他线程看见。 
2. 原子性: 对一个volatile变量的读写具有原子性，但是 i++不具有原子性。

原理：
线程A写一个volatile变量，实质上是线程A向要读取线程B**发送了一个消息**  
线程B读一个volatile变量，实质上是线程B接受线程A发出的消息  
上面两个过程就本质上是实现了 **进程间的通信**  



### 怎么实现volatile的语义
通过编译器禁止指令重拍来实现volatile的内存语义，具体就是插入**内存屏障**来实现。
jsr-133会禁止volatile变量和普通变量重排序

### 3. 锁的内存语义
 线程释放锁时，jmm会将线程对应的本地内存中的共享变量刷新到主存中(跟volatile的内存语义一样)。获得锁，进入临界区读到的共享变量都是**新鲜**的。
 
1. 线程A释放锁，实际是线程A向接下来要获取这个锁的某个线程B发出消息
2. 线程B获取一个锁，是指上是线程B收到了之前某个线程发出的消息
上面两个实际上是线程A向B发出了一个消息。


### 锁内存语义的实现
ReentrantLock分为公平锁和非公平锁
1. 公平锁和非公平锁最后都要写一个volatile变量state
2. 公平所获取是写限度volatile变量
3. 非公平锁，会用cas更新volatile变量，cas同事具有volatile读和volatile写的内存语义。

#### CAS为什么会有volatile的读和写的内存语义
如果 使用CAS，在编译成字节码的时候，会在指令cmpxchg钱前加一个Lock
intel对带有Lock前缀有如下描述:
1. 确保了**读-改-写**的原子性。lock会锁总线(或者锁住Cache),其他处理器无法访问内存。
2. 禁止该指令与前后的读和写指令重排序
3. 将缓冲中的所有数据刷新到内存。

#### concurrent包的实现
concurrent包就是建立在volatile和CAS上的。
例如 AQS 就是一个volatile变量state和一个队列(存放线程)组成，AQS本质上就是用CAS来各种操作state的一个库。

![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-7-11-concurrent-structure.jpg)

### 3. final的内存语义

final域的重排规则
1. 写: 在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作不能重排序
   JMM也会禁止编译器将final域的写重排到构造函数以外。
   写final可以保证，在对象引用为任意线程可见之前，对象的final域已经被正确初始化了，普通域没有这个保证。


2. 读： 读一个包含final域的对象引用，与随后初次读这个final域，这两个操作不能重排序。

在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。如果该引用不为null，那么这个对象的final域一定被线程A初始化了。


final 为引用类型的规则
改构造函数内对一个final引用对象的成员域写入，与随后再构造函数外把这个构造对象引用赋值给另个引用变量 这两个操作不能重排序。


## 双重检查锁定 延迟初始化(单例模式)
### 问题
```java
public class DoubleCheckLoking {
    public static DoubleCheckLoking instance;

    public static DoubleCheckLoking getInstance() {
        if (instance == null) {
            synchronized (DoubleCheckLoking.class) {
                if (instance == null) {
                    instance = new DoubleCheckLoking();
                }
            }
        }

        return instance;
    }
}
```

这是一个典型的单例代码 但是由于指令重拍却有可能有问题

这是因为  **instance = new DoubleCheckLoking();** 可能会有指令重拍
这句话包含了三部

```java
 memory = allocate();// 1. 分配对象的内存空间
 createInstance(memory); // 2 初始化对象
 instance = memory; // 3 设置instance指向分配的内存。
```

上面的 2和3 可能会有指令重排序，在多线程的时候就会发生下面的情况
**对象还没有初始化 就被其他线程看到了**
![部署](https://raw.githubusercontent.com/QuietListener/quietlistener.github.io/master/images/2017-09-11-double-check-locking.jpg)


### 解决办法
#### 1. 不让2和3 重排
```

public class DoubleCheckLoking {
    //volatile 禁止重排序
    public static volatile DoubleCheckLoking instance;

    public static DoubleCheckLoking getInstance() {
        if (instance == null) {
            synchronized (DoubleCheckLoking.class) {
                if (instance == null) {
                    instance = new DoubleCheckLoking();
                }
            }
        }
        return instance;
    }
}

```

2.  2和3可以重排，但是不对其他线程可见

在调用 getInstance1 时候会导致InstanceHolder类被初始化，多个线程去初始化同一个类或者接口的时候，jvm都会有**初始化锁**来进行同步。
```java
public class DoubleCheckLoking {
    
    public static DoubleCheckLoking getInstance1() {
        return InstanceHolder.instance;
    }
    private static class InstanceHolder{
        static DoubleCheckLoking instance = new DoubleCheckLoking();
    }
}

```