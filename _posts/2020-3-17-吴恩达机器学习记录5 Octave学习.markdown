---
layout: post
title: 吴恩达机器学习记录5 Octave学习
date: 2020-3-16 14:32:00
categories:  机器学习
---
# 1. 下载地址:
https://www.gnu.org/software/octave/download.html


# 2. 基本操作

## 1.  数值操作

```java

>> 2+3
ans =  5
>> 2^10
ans =  1024
>> 1==2 %false
ans = 0
>> 1 && 0 % Logic AND
ans = 0
>> 1 || 0 % Loginc OR
ans = 1
>> xor(1,0)
ans = 1
>>
>>
```

## 2. 变量 格式化打印

```java

>> %variable bellow
>> a = 3
a =  3
>> a = 3; % this will not print anything
>> a
a =  3
>>
>> b = "hi"
b = hi
>> a = pi
a =  3.1416
>> disp(a)
 3.1416
>> disp(sprintf('2 decimals %0.2f',a))
2 decimals 3.14
>>

```


## 3. 随机

```java
>> 
>> rand(2,3)
ans =

   0.863781   0.974177   0.459274
   0.022731   0.613962   0.152862

>>

```


## 4. 高斯随机


```java

>> randn(2,3)
ans =

   0.37407   2.06864  -1.44228
   1.56807  -0.29911   0.92779

>>
>> w = randn(1,1000);
>> hist(w)


```

## 5. 向量和矩阵


```java

>> A = [1 2 ; 2 3; 3 4]
A =

   1   2
   2   3
   3   4

>> A = [1,2;
3,4;
5 6]
A =

   1   2
   3   4
   5   6

>>
>> V = [1 2 3 ]
V =

   1   2   3

>> V = [1; 2; 3]
V =

   1
   2
   3

>>
>> v = 1:5
v =

   1   2   3   4   5

>> v = 1:2:10
v =

   1   3   5   7   9

>>
>> ones(2,3)
ans =

   1   1   1
   1   1   1

>> c = 2*ones(2,3)
c =

   2   2   2
   2   2   2

>> zeros(2,3)
ans =

   0   0   0
   0   0   0

>>
>> eye(3)
ans =

Diagonal Matrix

   1   0   0
   0   1   0
   0   0   1

>>

```


## 6. 向量的大小

```java
>> v = rand(2,3)
v =

   0.19601   0.44690   0.81204
   0.64525   0.89020   0.13843

>> size(v)
ans =

   2   3

>> b = size(v)
b =

   2   3

>> size(b)
ans =

   1   2

>>
>>
>>
>> size(v,1)
ans =  2
>> size(v,2)
ans =  3
>>
>>
>> a = 1:3
a =

   1   2   3

>> length(a)
ans =  3
>> a = [1;2;3]
a =

   1
   2
   3

>> length(a)
ans =  3
```


## 7. 加载数据

```java

>> pwd
ans = /Users/junjun
>> cd /Users/junjun/Documents/octave/
>> ls
featuresX.dat   priceY.dat
>>
>> load("featuresX.dat")
>> load("pricey.dat")
>> who
Variables in the current scope:

A          a          b          featuresX  v
V          ans        c          pricey     w

>> whos
Variables in the current scope:

   Attr Name           Size                     Bytes  Class
   ==== ====           ====                     =====  =====
        A              3x2                         48  double
        V              3x1                         24  double
        a              3x1                         24  double
        ans            1x2                         16  double
        b              1x2                         16  double
        c              2x3                         48  double
        featuresX      9x2                        144  double
        pricey         9x1                         72  double
        v              2x3                         48  double
        w              1x1000                    8000  double

Total is 1055 elements using 8440 bytes
>> featuresX
featuresX =

   2014      3
   1600      3
   2400      3
   1416      2
   3000      4
   1985      4
   1534      3
   1427      3
   1380      3

>> pricey
pricey =

   3999
   3299
   3690
   2320
   5399
   2999
   3149
   1989
   2120

>>
>> size(featuresX)
ans =

   9   2

>> size(pricey)
ans =

   9   1

>>
>> clear A % delete variable A
>> A
error: 'A' undefined near line 1 column 1

>> v = pricey(2:4) %获取子元素
v =

   3299
   3690
   2320

>>
>> save test1.mat v %将v的内容保存到test1.mat中
>> ls
featuresX.dat   priceY.dat      test1.mat
```



## 8. 矩阵数据操作

```java
>> v = pricey(2:4)
v =

   3299
   3690
   2320

>>
>>
>> save test1.mat v
>> ls
featuresX.dat   priceY.dat      test1.mat
>>
>>
>>
>> featuresX
featuresX =

   2014      3
   1600      3
   2400      3
   1416      2
   3000      4
   1985      4
   1534      3
   1427      3
   1380      3

>> featuresX(2,1)
ans =  1600
>> featuresX(2,:)
ans =

   1600      3

>> featuresX(:,2)
ans =

   3
   3
   3
   2
   4
   4
   3
   3
   3

>> featuresX([1,2],:)
ans =

   2014      3
   1600      3

>> featuresX(2,:) = [9,9]
featuresX =

   2014      3
      9      9
   2400      3
   1416      2
   3000      4
   1985      4
   1534      3
   1427      3
   1380      3

>>
>>
>>
>>
>> A = [1 11;2 22; 3 33]
A =

    1   11
    2   22
    3   33

>> A = [A, [111 ;222; 333]]
A =

     1    11   111
     2    22   222
     3    33   333

>> A(:) %put all elements of A into a single vector
ans =

     1
     2
     3
    11
    22
    33
   111
   222
   333

>> A = [-1 -11;-2 -22; -3 -33]
A =

   -1  -11
   -2  -22
   -3  -33

>> A = [A, [111 ;222; 333]]
A =

    -1   -11   111
    -2   -22   222
    -3   -33   333

>> B = [-1 -11;-2 -22; -3 -33]
B =

   -1  -11
   -2  -22
   -3  -33

>> A = [1 11;2 22; 3 33]
A =

    1   11
    2   22
    3   33

>> C = [A B]
C =

    1   11   -1  -11
    2   22   -2  -22
    3   33   -3  -33

>> D = [A;B]
D =

    1   11
    2   22
    3   33
   -1  -11
   -2  -22
   -3  -33

>>

```



# 2. 矩阵运算
## 1.

```java
>> A = [1 2; 3 4; 5 6]
A =

   1   2
   3   4
   5   6

>> B = [11 12 ; 13  14; 15 16;]
B =

   11   12
   13   14
   15   16

>> C = [1 1 ; 2 2]
C =

   1   1
   2   2

>> A*C
ans =

    5    5
   11   11
   17   17

>> A.*B %对应的元素相乘
ans =

   11   24
   39   56
   75   96

>> A.^2 %每个元素n次方
ans =

    1    4
    9   16
   25   36

>> 1 ./ A %每个元素导数
ans =

   1.00000   0.50000
   0.33333   0.25000
   0.20000   0.16667

>> log(A) %每个元素取log
ans =

   0.00000   0.69315
   1.09861   1.38629
   1.60944   1.79176

>> exp(A) %每个元素取自然对数
ans =

     2.7183     7.3891
    20.0855    54.5982
   148.4132   403.4288

>> A
A =

   1   2
   3   4
   5   6

>> A+1 %每个元素加1
ans =

   2   3
   4   5
   6   7

>> A+ones(3,2)
ans =

   2   3
   4   5
   6   7

>> A' %转置
ans =

   1   3   5
   2   4   6

>> max(A) %最大值 第一个是index。
ans =

   5   6

>> A < 5 %每个值判断是否小于5
ans =

  1  1
  1  1
  0  0

>> V = 1:4
V =

   1   2   3   4

>> find(V < 3) %找到小于3的值。返回index
ans =

   1   2

>> find(V < 4)
ans =

   1   2   3

>> [r,c] = find(A < 5) %矩阵找到小于5的元素，返回对应元素的row 和 column值。
r =

   1
   2
   1
   2

c =

   1
   1
   2
   2

>>
>> V
V =

   1   2   3   4

>> sum(V) %所有元素的和
ans =  10
>> prod(V) %所有元素的乘积
ans =  24
>>
>> V = [V 0.5]
V =

   1.00000   2.00000   3.00000   4.00000   0.50000

>> floor(V) %地板函数
ans =

   1   2   3   4   0

>> ceil(V) %天花板函数
ans =

   1   2   3   4   1

>>
>>  B = [1 1; 11 11; 4 12]
B =

    1    1
   11   11
    4   12

>> A
A =

   1   2
   3   4
   5   6

>> max(A,B) %去对应的元素中大的元素作为新矩阵的元素
ans =

    1    2
   11   11
    5   12

>>

>> max(B,[],1)  %取每一列的最大值 1代表列
ans =

   11   12

>> max(B,[],2)  %取每一行的最大值 代表行
ans =

    1
   11
   12

>> max(B) %默认取每一列的最大值
ans =

   11   12

>> max(max(B)) %取矩阵最大值
ans =  12
>> max(B(:)) %也是取矩阵最大值
ans =  12
>>






>> A=magic(3) %magic返回一个3x3的矩阵，每列，每行，对角线的和都相等
A =

   8   1   6
   3   5   7
   4   9   2

>> sum(A,1) %列的和
ans =

   15   15   15

>> sum(A,2)  %行的和
ans =

   15
   15
   15

>> A.*eye(3) %取对角线的值
ans =

   8   0   0
   0   5   0
   0   0   2

>> sum(sum(A.*eye(3))) %计算对角线的和
ans =  15
>>
>>
>>
>> flipud(eye(3)) %反对角线
ans =

Permutation Matrix

   0   0   1
   0   1   0
   1   0   0

>> sum(sum(A.*flipud(eye(3)))) %反对角线的值
ans =  15
>>
>> B = pinv(A) %取A的逆
B =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

>> A*B %A与A的逆的乘积为单位矩阵
ans =

   1.0000e+00  -1.2323e-14   6.6613e-15
  -6.9389e-17   1.0000e+00   2.2204e-16
  -5.8564e-15   1.2434e-14   1.0000e+00

```


# 3.矩阵绘图

```java
>> t = [0:0.01:0.98];
>> y1 = sin(2*pi*4*t);
>> y2 = cos(2*pi*4*t);
>> plot(t,y1) %绘制图像
>> plot(t,y2) %清除第原来的图像，绘制第二个图像
>> plot(t,y1)
>> hold on  %不清除原来的图像
>> plot(t,y2)
>> plot(t,y2,"r") %使用红色做图 r表示颜色
>> xlabel("time") %横坐标
>> ylabel("value") %纵坐标
>> legend('sin','cos') %标记一下每条函数曲线
>> title('my plot') %加title
>> print -dpng 'myplog.png'; %保存为png图像到当前路径
>> ls
featuresX.dat   myplog.png      priceY.dat      test1.mat
>> close %清除所有图像

>> subplot(1,2,1); %将图像分为1x2的两个区域，并在第1个区域绘图
>> plot(t,y1) %绘制图像到第一个区域
>> subplot(1,2,2);  %并在第2个区域绘图
>> plot(t,y2)
>> axis([0.5 1 0.2 1]) % 将第二个区域的图像，横轴显示范围为[0.5,1],纵轴显示范围为[0.2,1]

```


# 4. 控制语句

```java
>> v = 1:2:10
v =

   1   3   5   7   9

>> for i = 1:length(v), %for
v(i) = 2^i;
end
>> v
v =

    2    4    8   16   32

>>
>> for i = v, %for
disp(i);
end
 2
 4
 8
 16
 32
>>
>>
>>
>> i = 1;
>> while i < length(v), %while
v(i) =v(i) + 1;
i = i+1;
end

>> v1 = 1:2:8
v1 =

   1   3   5   7

>> i = 1;
>> while i < length(v1),
v1(i) =v1(i) + 1;
i = i+1;
end
>> v1
v1 =

   2   4   6   7

>> i = 1;
>> while i < length(v1),
v1(i) =v1(i) + 1;
i = i+1;
if i >= 3, 
break;  %break
end
end
>> v1
v1 =

   3   5   6   7

>>
>>
>>
>> i =1
i =  1
>> if i == 2 %if else end 
   disp("value is one")
elseif i == 1,
    disp("value is 1")
end
value is 1
>>
```


# 5. 函数
octave函数可以返回多个结果。

myFunc1.m
```java
function y = myFunc1(m,n)
m = m+1;
n = n+1;
y = m+n;
```

myFunc2.m
```java
function [x,y] = myFunc2(m,n)
x = n+1;
y = m+1;
```

```java
>> pwd
ans = /Users/junjun/Documents/octave
>> addpath("/Users/junjun/Documents/octave") %添加搜索路径，以便能找到自定义函数
>> myFunc1(1,2) %函数1
ans =  5
>> [a,b] = myFunc2(1,2) %函数2 返回两个值
a =  3
b =  2

```